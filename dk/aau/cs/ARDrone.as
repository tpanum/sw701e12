package dk.aau.cs {	import flash.net.Socket;	import flash.system.Security;	import flash.utils.ByteArray;	import flash.events.*;	import flash.external.ExternalInterface;		public class ARDrone {				private var connection:Socket = new Socket();		private var ip:String;		private var port:int;		private var lastMessage:String = '';		private var key:String = 'lottehvorduhenne';		public function ARDrone(ip_address:String, port_number:int, newKey:String) {			ip = ip_address;			port = port_number;			key = newKey;			connection.connect(ip, port);			configureListeners();		}				public function disconnect():void {			connection.close();		}				private function configureListeners():void {			ExternalInterface.call("console.log", "setting up connectionhandlers");    		connection.addEventListener(Event.CLOSE, onClose);    		connection.addEventListener(Event.CONNECT, onConnect);    		connection.addEventListener(IOErrorEvent.IO_ERROR, onIoError);    		connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);    		connection.addEventListener(ProgressEvent.SOCKET_DATA, onData);		}				private function onClose(event:Event):void {			ExternalInterface.call("console.log", "connection closed: "+ event);		}				private function onConnect(event:Event):void {			ExternalInterface.call("console.log", "connection open: "+ event);		}				private function onIoError(event:IOErrorEvent):void {			ExternalInterface.call("console.log", "ioError: "+ event);		}				private function onSecurityError(event:SecurityErrorEvent):void {			ExternalInterface.call("console.log", "securityError: "+ event);		}				private function onData(event:ProgressEvent):void {			ExternalInterface.call("console.log", "socketData: "+ event);		}				private function sendCommand(object:Object):String {			object.key = key;			var str:String = JSON.stringify(object);			if (connection.connected) {				connection.writeUTFBytes(str+'\n');				connection.flush();				ExternalInterface.call("console.log", "message sent");			} else {				connection.connect(ip, port);				ExternalInterface.call("console.log", "connection not open. Retrying to open connection");			}			return str;		}				public function idle():String {			var o:Object = new Object();			o.action = 'idle';			return sendCommand(o);		}				public function hover() {			//sendCommand('hover');		}				public function flight():String {			var o:Object = new Object();			o.action = 'flight';			return sendCommand(o);		}				public function left():String {			var o:Object = new Object();			o.action = 'left';			return sendCommand(o);		}				public function right():String {			var o:Object = new Object();			o.action = 'right';			return sendCommand(o);		}				public function forward():String {			var o:Object = new Object();			o.action = 'forward';			return sendCommand(o);		}				public function backward():String {			var o:Object = new Object();			o.action = 'backward';			return sendCommand(o);		}	}}