require 'socket'
require 'eventmachine'
require 'json'
require 'open-uri'
require 'rexml/document'

# Sets the encvironment the daemons is ran in
ENV["RAILS_ENV"] ||= "development"

#Auto generated by the daemons-rails daemon generator
root = File.expand_path(File.dirname(__FILE__))
root = File.dirname(root) until File.exists?(File.join(root, 'config'))
require File.join(root, "config", "environment")

#Stops the daemon if rake daemon:____name__:stop is called, autogenerated. However since a loop is ran in the eventmachine this doesn't do anything.
$running = true
Signal.trap("TERM") do 
  $running = false
end

#Module for handling incomming connections to the server
module Drone_connector

  #When a connection is established the following method is invoked
  def post_init
    puts "-- someone connected to the echo server!"
  end

  def receive_data data 
    port, ip = Socket.unpack_sockaddr_in(get_peername)
    url = "http://api.hostip.info/?ip="+ip
    @xmldoc = open(url).read {|f|f.read}
    doc = REXML::Document.new(@xmldoc)

    doc.elements.each('//gml:name') do |c|
      @loc = c.text
    end
    
    if is_json?(data)
      obj = JSON.parse(data)
      name = obj['slave_id']
      drone = Drone.new(:ip => ip, :name => name, :description => "Red Leader", :location => @loc)
      drone.save
      puts name
    end
    
  end

  def unbind
    puts "-- someone disconnected from the echo server!"
  end

  def is_json?(string)
    begin
      JSON.parse(string).all?
    rescue JSON::ParserError
      false
    end
  end

end

module Seskey_server

  $request = false
  #When a connection is established the following method is invoked
  def post_init
    puts "connected to seskey server"
  end

  def receive_data data
    puts "received seskey_request"
    @seskey1 = "invalid"
    if $request == false
      puts "1"
      $request = true 
      if is_json?(data)
        puts "2"
        obj = JSON.parse(data)
        if obj['request'] == "true"
          puts "3"
            EventMachine::run {
              em = EventMachine::connect obj['ip'], 5122, Seskey_connector
              @seskey1 = $seskey
            }
        end
      end
    end
    $request = false
    send_data "{\"sessionkey\":\"#{@seskey1}\"}"
  end

  def unbind
    
  end

  def is_json?(string)
    begin
      JSON.parse(string).all?
    rescue JSON::ParserError
      false
    end
  end

end

module Seskey_connector
  $seskey = "invalid"
  def post_init
    send_data "{\"session\":\"true\"}"
  end

  def receive_data data
    if is_json?(data)
      obj = JSON.parse(data)
      $seskey = obj['sessionkey']
    end
    EventMachine::stop_event_loop
  end

  def unbind
    
  end

  def is_json?(string)
    begin
      JSON.parse(string).all?
    rescue JSON::ParserError
      false
    end
  end

end

while($running) do  
  EventMachine::run {
    EventMachine::start_server "0.0.0.0", 5124, Drone_connector
    EventMachine::start_server "0.0.0.0", 5125, Seskey_server
  }
  
  sleep (1)
end
